#!/bin/bash

# Uptime Kuma Alert Integration Script
# Monitors Uptime Kuma database and sends email alerts via existing SendGrid system

set -e

# Source the existing email function
source /root/thermalog-ops/scripts/deployment/auto-deploy.sh

# Configuration
KUMA_DB="/var/lib/docker/volumes/root_uptime-kuma-data/_data/kuma.db"
ALERT_LOG="/root/thermalog-ops/logs/monitoring/uptime-alerts.log"
STATE_FILE="/tmp/uptime-kuma-state"

log_alert() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $ALERT_LOG
}

# Check if Uptime Kuma container is running
if ! docker ps | grep -q uptime-kuma; then
    log_alert "❌ Uptime Kuma container is not running"
    exit 1
fi

# Get current monitor status
CURRENT_STATUS=$(docker exec uptime-kuma sqlite3 /app/data/kuma.db "
SELECT m.id, m.name, m.type, 
       CASE 
         WHEN h.status = 0 THEN 'DOWN'
         WHEN h.status = 1 THEN 'UP' 
         WHEN h.status = 2 THEN 'PENDING'
         ELSE 'UNKNOWN'
       END as status,
       h.msg, h.time
FROM monitor m 
LEFT JOIN heartbeat h ON m.id = h.monitor_id 
WHERE h.time = (SELECT MAX(time) FROM heartbeat WHERE monitor_id = m.id)
ORDER BY m.id;
" 2>/dev/null)

# Create current state file
echo "$CURRENT_STATUS" > "${STATE_FILE}.new"

# Check if this is first run
if [ ! -f "$STATE_FILE" ]; then
    log_alert "🔄 First run - initializing monitor state tracking"
    mv "${STATE_FILE}.new" "$STATE_FILE"
    exit 0
fi

# Compare with previous state
if ! diff -q "$STATE_FILE" "${STATE_FILE}.new" >/dev/null 2>&1; then
    log_alert "📊 Monitor status changes detected"
    
    # Find changes
    while IFS='|' read -r id name type status msg time; do
        # Get previous status for this monitor
        PREV_STATUS=$(grep "^$id|" "$STATE_FILE" 2>/dev/null | cut -d'|' -f4 || echo "UNKNOWN")
        
        if [ "$status" != "$PREV_STATUS" ] && [ "$PREV_STATUS" != "UNKNOWN" ]; then
            # Status changed - send alert
            case "$status" in
                "DOWN")
                    EMOJI="🚨"
                    PRIORITY="high"
                    ACTION="FAILED"
                    ;;
                "UP")
                    EMOJI="✅"
                    PRIORITY="normal"
                    ACTION="RECOVERED"
                    ;;
                "PENDING")
                    EMOJI="⚠️"
                    PRIORITY="normal"
                    ACTION="WARNING"
                    ;;
                *)
                    EMOJI="❓"
                    PRIORITY="normal"
                    ACTION="UNKNOWN"
                    ;;
            esac
            
            # Create detailed alert message
            ALERT_SUBJECT="$EMOJI Thermalog Monitor Alert: $name $ACTION"
            ALERT_MESSAGE="THERMALOG MONITORING ALERT
            
🖥️  Monitor: $name ($type)
📊 Status Change: $PREV_STATUS → $status
⏰ Time: $time
💬 Message: ${msg:-'No additional message'}

🔍 MONITOR DETAILS:
• Monitor ID: $id
• Type: $type
• Previous Status: $PREV_STATUS
• Current Status: $status

🏥 SYSTEM STATUS CHECK:
$(docker ps --format 'table {{.Names}}\t{{.Status}}' | grep -E 'thermalog|nginx')

📊 QUICK DIAGNOSTICS:
• Backend Health: $(curl -s http://localhost:3001/api/health >/dev/null 2>&1 && echo "✅ Reachable" || echo "❌ Unreachable")
• Frontend: $(curl -s http://localhost:80 >/dev/null 2>&1 && echo "✅ Reachable" || echo "❌ Unreachable")
• Dashboard: $(curl -s https://dashboard.thermalog.com.au >/dev/null 2>&1 && echo "✅ Reachable" || echo "❌ Unreachable")

This alert was generated by the Uptime Kuma integration system.
Dashboard: http://$(curl -s ipinfo.io/ip 2>/dev/null):3002"

            # Send email using existing system
            send_email "$ALERT_SUBJECT" "$ALERT_MESSAGE" "$PRIORITY"
            
            log_alert "$EMOJI Monitor '$name' changed: $PREV_STATUS → $status"
        fi
    done <<< "$CURRENT_STATUS"
    
    # Update state file
    mv "${STATE_FILE}.new" "$STATE_FILE"
else
    # No changes - clean up
    rm -f "${STATE_FILE}.new"
fi

log_alert "✅ Monitor check completed"